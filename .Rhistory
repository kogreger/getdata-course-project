install.packages("plyr")
install.packages("plyr")
count(diamonds$volume == 0)
library(plyr)
count(diamonds$volume == 0)
cor.test(subset(diamonds, volume == 0 OR volume >= 8000), price, volume)
cor.test(subset(diamonds, volume == 0 || volume >= 8000), price, volume)
diamonds$volume = with(diamonds, x * y * z)
cor.test(subset(diamonds, volume == 0 || volume >= 8000), price, volume)
cor.test(subset(diamonds, diamonds$volume == 0 || diamonds$volume >= 8000), price, volume)
cor.test(subset(diamonds, diamonds$volume == 0 || diamonds$volume >= 8000), diamonds$price, diamonds$volume)
cor.test(subset(diamonds$price, diamonds$volume == 0 || diamonds$volume >= 8000), subset(diamonds$volume, diamonds$volume == 0 || diamonds$volume >= 8000))
diamonds_subset <- subset(diamonds, diamonds$volume == 0 || diamonds$volume >= 8000)
cor.test(diamonds_subset$price, diamonds_subset$volume)
diamonds_subset <- subset(diamonds, diamonds$volume > 0 || diamonds$volume < 800)
cor.test(diamonds_subset$price, diamonds_subset$volume)
cor.test(subset(diamonds$price, diamonds$volume > 0 || diamonds$volume < 800), subset(diamonds$volume, diamonds$volume > 0 || diamonds$volume < 800))
cor.test(subset(diamonds$price, diamonds$volume > 0 & diamonds$volume < 800), subset(diamonds$volume, diamonds$volume > 0 & diamonds$volume < 800))
diamonds_subset <- subset(diamonds, diamonds$volume > 0 & diamonds$volume < 800)
ggplot(diamonds_subset, aes(price, volume)) + geom_point()
library(ggplot2)
ggplot(diamonds_subset, aes(price, volume)) + geom_point()
ggplot(diamonds_subset, aes(price, volume)) + geom_point(alpha = 1/50)
?geom_smooth
ggplot(diamonds_subset, aes(price, volume)) + geom_point(alpha = 1/50) + geom_smooth(diamonds_subset, aes(price, volume))
ggplot(diamonds_subset, aes(price, volume)) + geom_point(alpha = 1/50) + geom_smooth()
install.packages("dplyr")
library(dplyr)
detach(plyr, unload = TRUE)
detach("plyr", unload = TRUE)
detach("package:plyr", unload=TRUE)
library(ggplot2)
library(dplyr)
diamonds$volume <- with(diamonds, x * y * z)
diamonds_subset <- subset(diamonds, diamonds$volume > 0 & diamonds$volume < 800)
detach(diamonds_subset, unload = T)
diamonds2 <- diamonds %.%
group_by(clarity) %.%
summarize(mean_price = mean(price), median_price = median(price), min_price = min(price), max_price = max(price), n = n()) %.%
arrange(clarity)
View(diamonds2)
diamonds_by_clarity <- group_by(diamonds, clarity)
diamonds_mp_by_clarity <- summarise(diamonds_by_clarity, mean_price = mean(price))
diamonds_by_color <- group_by(diamonds, color)
diamonds_mp_by_color <- summarise(diamonds_by_color, mean_price = mean(price))
ggplot(diamonds_mp_by_clarity, aes(mean_price)) + geom_bar()
ggplot(diamonds_mp_by_clarity, aes(mean_price)) + geom_bar(stat = "identity")
ggplot(diamonds_mp_by_clarity, aes(clarity, mean_price)) + geom_bar(stat = "identity")
p1 <- ggplot(diamonds_mp_by_clarity, aes(clarity, mean_price)) + geom_bar(stat = "identity")
p2 <- ggplot(diamonds_mp_by_color, aes(color, mean_price)) + geom_bar(stat = "identity")
p2
install.packages("gridExtra")
library(gridExtra)
?grid.arrange
grid.arrange(p1, p2)
diamonds_by_cut <- group_by(diamonds, cut)
diamonds_mp_by_cut <- summarise(diamonds_by_cut, mean_price = mean(price))
p3 <- ggplot(diamonds_mp_by_cut, aes(cut, mean_price)) + geom_bar(stat = "identity")
grid.arrange(p1, p2, p3)
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
library(ggplot2)
data(diamonds)
library(GGally)
library(scales)
library(memisc)
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
library(gridExtra)
plot1 <- qplot(diamonds, price) +
ggtitle('Price')
plot1 <- qplot(diamonds, price) +
geom_hist()
ggtitle('Price')
plot1 <- qplot(diamonds, price) +
geom_bar()
ggtitle('Price')
plot1 <- qplot(diamonds, price) +
geom_bar() +
ggtitle('Price')
plot2 <- qplot(diamonds, price) +
geom_bar() +
scale_y_log10()
ggtitle('Price (log10)')
plot2 <- qplot(diamonds, price) +
geom_bar() +
scale_y_log10() +
ggtitle('Price (log10)')
plot2 <- qplot(diamonds, price) +
geom_bar() +
scale_y_log10() +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2)
plot1 <- qplot(data = diamonds, x = price) +
geom_bar() +
ggtitle('Price')
plot2 <- qplot(data = diamonds, x = price) +
geom_bar() +
scale_y_log10() +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2)
plot2 <- qplot(data = diamonds, x = price) +
geom_bar() +
scale_x_log10() +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2)
plot1 <- qplot(data = diamonds, x = price, binwidth = 100) +
geom_bar() +
ggtitle('Price')
plot2 <- qplot(data = diamonds, x = price, binwidth = 0.01) +
geom_bar() +
scale_x_log10() +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2)
plot1 <- qplot(data = diamonds, x = price, binwidth = 100) +
ggtitle('Price')
plot2 <- qplot(data = diamonds, x = price, binwidth = 0.01) +
scale_x_log10() +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2)
ggplot(diamonds,
aes(carat, price)) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_log10(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(color = I('#F79420'), alpha = 1/4)
ggplot(diamonds,
aes(carat, price)) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_log10() +
geom_point(color = I('#F79420'), alpha = 1/4)
ggplot(diamonds,
aes(carat, price)) +
scale_y_log10() +
geom_point(color = I('#F79420'), alpha = 1/4)
cuberoot_trans <- function() trans_new('cuberoot',
transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(diamonds,
aes(carat, price)) +
scale_x_continuous(trans = cuberoot_trans(),
limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(),
limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
geom_point(color = I('#F79420'), alpha = 1/4) +
ggtitle('Price log10 by Cube-Root of Carat')
head(sort(table(diamonds$carat), decreasing = T))
head(sort(table(diamonds$price), decreasing = T))
table(diamonds$carat)
ggplot(aes(carat, price), data = diamonds) +
geom_jitter(aes(alpha = 1/2, size = 3/4)) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_jitter(alpha = 1/2, size = 3/4) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 1/2, size = 3/4, position = 'jitter') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
install.packages("RColorBrewer")
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter', color = clarity) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds, color = clarity) +
geom_point(alpha = 0.5, size = 1, position = 'jitter', color = clarity) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
names(diamonds)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter', color = diamonds$clarity) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color',
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
m1 <- lm(I(log(price)) ~ I(carat ^ (1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
header=TRUE, stringsAsFactors=FALSE)
galton <- read.csv("http://blog.yhathq.com/static/misc/galton.csv",
header=TRUE,
stringsAsFactors=FALSE)
summary(galton)
head(galton)
fit <- lm(child ~ parent, data = galton)
fit
summary(fit)
library(reshape2)
phones <- melt(WorldPhones)
head(phones)
names(phones) <- c("year", "continent", "n_phones")
head(phones)
fit2 <- lm(n_phones ~ year + continent, data=phones)
summary(fit2)
plot(fit)
plot(fit2)
con <- url("http://jhsph.edu", "r")
x <- readLines(con)
head(x)
x
install.packages("swirl")
library(sworl)
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z -1)
my_sqrt
my_div <- (z / my_sqrt)
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
1:20
pi:10
15:1
?':'
seq(1, 20)
seq(0, 10, by = 0.5)
my_seq <- seq(0, 10, length = 30)
my_seq <- seq(5, 10, length = 30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, -1, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Konni")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
install.packages("RMySQL")
??install.packages
install.packages("RMySQL", type="source")
library(RMySQL)
install.packages("sqldf")
library(sqldf)
acs <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv ")
acs <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
acs <- read.csv("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select distinct AGEP from acs")
unique(acs$AGEP)
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(con)
close(con)
htmlCode
htmlCode[10,]
htmlCode[10]
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
report <- read.fwf("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", c(1, 16, 21, 29, 34, 42, 47, 55, 60), header = F, skip = 4)
head(report)
report <- read.fwf("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", c(2, 16, 21, 29, 34, 42, 47, 55, 60), header = F, skip = 4)
head(report)
report <- read.fwf("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", c(-1., 9, -5, 4, -1, 3, -5, 4, -1, 3, -5, 4, -1, 3, -5, 4, -1, 3), header = F, skip = 4)
head(report)
sum(v4)
sum(reportv4)
sum(report$v4)
class(report$v4)
class(report$4)
class(report[4])
class(report)
sum(report[4])
sqldf("select distinct AGEP from acs") == nique(acs$AGEP)
sqldf("select distinct AGEP from acs") == unique(acs$AGEP)
library(reshape2)
x.test <- read.table("UCI HAR Dataset/test/X_test.txt")
setwd("~/Documents/Coursera/Data Science Specialization/Getting and Cleaning Data/getdata-course-project")
setwd("~/Documents/Coursera/Data Science Specialization/Getting and Cleaning Data/getdata-course-project")
x.test <- read.table("UCI HAR Dataset/test/X_test.txt")
?sub
names(x.test) <- sub("\\.", "", make.names(features))
features <- read.table("UCI HAR Dataset/features.txt")[, 2]
names(x.test) <- sub("\\.", "", make.names(features))
names(x.test)
names(x.test) <- sub(".", "", make.names(features))
names(x.test)
names(x.test) <- make.names(features)
names(x.test)
names(x.test) <- sub(".", "", names(features))
names(x.test)
names(x.test) <- make.names(features)
names(x.test)
names(x.test) <- sub("\\.", "", names(features))
names(x.test)
names(x.test) <- make.names(features)
names(x.test) <- sub("\\.", "", names(x.test))
names(x.test)
names(x.test) <- make.names(features)
names(x.test) <- sub(".", "", names(x.test))
names(x.test)
names(x.test) <- make.names(features)
names(x.test) <- sub("\\.", "", names(x.test), )
names(x.test)
names(x.test) <- make.names(features)
sub("\\.", "", names(x.test), )
sub("\.", "", names(x.test), )
names(x.test) <- make.names(features)
sub(".", "", names(x.test), )
names(x.test) <- make.names(features)
sub("//.", "", names(x.test), )
sub("/.", "", names(x.test), )
names(x.test) <- make.names(features)
sub("\.", "", names(x.test), )
names(x.test) <- make.names(features)
sub("[:punct:]", "", names(x.test), )
names(x.test) <- make.names(features)
sub("[:punct:]", "", names(x.test))
names(x.test) <- make.names(features)
names(x.test)
sub("[:punct:]", "", names(x.test))
names(x.test) <- make.names(features)
sub(".", "", names(x.test), fixed = T)
names(x.test) <- make.names(features)
sub("\\.", "", names(x.test))
sub("\\.", "", "names(x.test)")
sub("\\.", "", "fBodyBodyAccJerkMagskewness..")
names(x.test) <- make.names(features)
sub("*\\.", "", "fBodyBodyAccJerkMagskewness..")
sub("*(\\.)", "", "fBodyBodyAccJerkMagskewness..")
sub("?(\\.)", "", "fBodyBodyAccJerkMagskewness..")
sub(".(\\.)", "", "fBodyBodyAccJerkMagskewness..")
sub("\\.*", "", "fBodyBodyAccJerkMagskewness..")
sub("\\..", "", "fBodyBodyAccJerkMagskewness..")
names(x.test) <- make.names(features)
sub("\\..", "", names(x.test))
x.test <- read.table("UCI HAR Dataset/test/X_test.txt")
names(x.test) <- sub("[:punct:]", "", names(x.test))
names(x.test)
x.test <- read.table("UCI HAR Dataset/test/X_test.txt")
names(x.test) <- sub("[:punct:]", "", names(features))
names(x.test)
x.test <- read.table("UCI HAR Dataset/test/X_test.txt")
names(x.test) <- names(features)
names(x.test)
names(x.test) <- names(features)
names(x.test)
x.test <- read.table("UCI HAR Dataset/test/X_test.txt")
names(x.test) <- names(features)
names(x.test)
x.test <- read.table("UCI HAR Dataset/test/X_test.txt")
names(x.test) <- features
names(x.test)
names(x.test) <- sub("[:punct:]", "", names(x.test))
names(x.test)
names(x.test)
names(x.test) <- gsub("[:punct:]", "", names(x.test))
names(x.test)
names(x.test) <- features
names(x.test)
names(x.test) <- gsub("\\.", "", names(x.test))
names(x.test)
names(x.test) <- make.names(features)
names(x.test)
names(x.test) <- gsub("\\.", "", names(x.test))
names(x.test)
x.test <- read.table("UCI HAR Dataset/test/X_test.txt")
names(x.test) <- gsub("\\.", "", make.names(features))
names(x.test)
library(reshape2)
setwd("~/Documents/Coursera/Data Science Specialization/Getting and Cleaning Data/getdata-course-project")
# load feature labels (second column in file)
features <- read.table("UCI HAR Dataset/features.txt")[, 2]
# load actual "test" data sets
x.test <- read.table("UCI HAR Dataset/test/X_test.txt")
# create descriptive and digestible column names
names(x.test) <- gsub("\\.", "", make.names(features))
y.test <- read.table("UCI HAR Dataset/test/y_test.txt")
names(y.test) <- "activity"
subject.test <- read.table("UCI HAR Dataset/test/subject_test.txt")
names(subject.test) <- "subject"
# load actual "training" data sets
x.train <- read.table("UCI HAR Dataset/train/X_train.txt")
# create descriptive and digestible column names
names(x.train) <- gsub("\\.", "", make.names(features))
y.train <- read.table("UCI HAR Dataset/train/y_train.txt")
names(y.train) <- "activity"
subject.train <- read.table("UCI HAR Dataset/train/subject_train.txt")
names(subject.train) <- "subject"
# extract activity labels
activity.labels <- read.table("UCI HAR Dataset/activity_labels.txt")
names(activity.labels) <- c("activity", "act.label")
# check for equal object sizes
nrow(x.test) == nrow(y.test) & nrow(y.test) == nrow(subject.test)
nrow(x.train) == nrow(y.train) & nrow(y.train) == nrow(subject.train)
# combine single data sets into "test" and "train" data sets
test <- cbind(x.test, y.test, subject.test)
train <- cbind(x.train, y.train, subject.train)
# combine "test" and "train" data sets into overall "data" dataset
data <- rbind(test, train)
# reduce data set to subject, activity, and all columns
# containing "mean" or "std"
cols.to.keep <- names(data)[grep("mean|std", names(data))]
data <- data[c("subject",
"activity", cols.to.keep)]
# merge descriptive activity names to overall data set
data <- merge(data, activity.labels, by.x = "activity", by.y = "activity")
# create second, independent tidy data set with average of each
# variable for each activity and each subject
data_melt <- melt(data,
id = c("subject", "act.label"),
measure.vars = cols.to.keep)
tidy.data <- dcast(data_melt, subject + act.label ~ variable, mean)
